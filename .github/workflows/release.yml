name: Release

on:
  push:
    branches: # Changed from tags to branches
      - main

# Permissions required for the workflow steps
permissions:
  contents: write # To create releases, upload artifacts, and allow semantic-release to push tags/commits
  packages: write # To push Docker images to GHCR
  id-token: write # needed for keyless signing
  attestations: write # needed for attestations

# Ensure only one release job runs at a time
concurrency:
  group: release
  cancel-in-progress: false

jobs:
  release:
    name: Release
    runs-on: ubuntu-latest
    outputs:
      release_created: ${{ steps.check_release.outputs.release_created }}
    steps:
      - name: Generate bot app token
        id: generate_token
        uses: actions/create-github-app-token@v2
        with:
          app-id: ${{ secrets.RELEASER_APP_ID }}
          private-key: ${{ secrets.RELEASER_PRIVATE_KEY }}
      # Check out the repository code with full history for semantic-release
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          token: ${{ steps.generate_token.outputs.token }}
          fetch-depth: 0
          persist-credentials: false

      # Set up Go environment (for GoReleaser)
      - name: Set up Go
        uses: actions/setup-go@v6
        with:
          go-version: "1.25" # Keep aligned with go.mod
          cache: true

      # Install Syft for SBOM generation (if GoReleaser is configured to use it or for other steps)
      - name: Install Syft
        uses: anchore/sbom-action/download-syft@v0.20.8

      # Set up QEMU for multi-platform builds (used by GoReleaser's Docker buildx)
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      # Set up Docker Buildx for multi-platform builds
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Log in to GitHub Container Registry (GHCR) (for GoReleaser)
      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Install GoReleaser CLI (for semantic-release-goreleaser plugin)
      - name: Install GoReleaser CLI
        uses: goreleaser/goreleaser-action@v6
        with:
          version: latest
          install-only: true

      # Set up Node.js (for semantic-release)
      - name: Setup Node.js
        uses: actions/setup-node@v6
        with:
          node-version: "lts/*" # Use a Long Term Support version
          cache: "npm" # Cache npm dependencies

      # Install semantic-release and plugins
      - name: Install semantic-release dependencies
        run: npm ci

      - name: Import GPG key
        id: import_gpg
        uses: crazy-max/ghaction-import-gpg@v6
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}

      - name: Configure Git for GPG signing
        run: |
          git config --global user.signingkey ${{ steps.import_gpg.outputs.keyid }}
          git config --global commit.gpgsign true
        env:
          GIT_AUTHOR_NAME: "releaser[bot]"
          GIT_AUTHOR_EMAIL: ${{ secrets.RELEASER_EMAIL }}
          GIT_COMMITTER_NAME: "releaser[bot]"
          GIT_COMMITTER_EMAIL: ${{ secrets.RELEASER_EMAIL }}

      # Run semantic-release
      # This will analyze commits, determine version, generate notes,
      # trigger GoReleaser (via semantic-release-goreleaser plugin),
      # and publish the GitHub release.
      - name: Run semantic-release
        run: npx semantic-release
        env:
          GITHUB_TOKEN: ${{ steps.generate_token.outputs.token }}
          GIT_AUTHOR_EMAIL: ${{ secrets.RELEASER_EMAIL }}
          GIT_COMMITTER_EMAIL: ${{ secrets.RELEASER_EMAIL }}

      # Check if a release was created by looking for the dist directory
      - name: Check if release was created
        id: check_release
        run: |
          if [ -f ./dist/checksums.txt ] && [ -f ./dist/digests.txt ]; then
            echo "release_created=true" >> "$GITHUB_OUTPUT"
            echo "Release was created, attestation will proceed"
          else
            echo "release_created=false" >> "$GITHUB_OUTPUT"
            echo "No release was created, skipping attestation"
          fi

      # After GoReleaser runs, attest all the files in ./dist/checksums.txt:
      - name: Attest Build Provenance for Archives
        if: steps.check_release.outputs.release_created == 'true'
        uses: actions/attest-build-provenance@v3
        with:
          subject-checksums: ./dist/checksums.txt

      # After GoReleaser runs, attest all the images in ./dist/digests.txt:
      - name: Attest Build Provenance for Docker Images
        if: steps.check_release.outputs.release_created == 'true'
        uses: actions/attest-build-provenance@v3
        with:
          subject-checksums: ./dist/digests.txt

  deploy-docs:
    name: Deploy Documentation
    runs-on: ubuntu-latest
    needs: release
    if: needs.release.outputs.release_created == 'true'
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Cache pip packages
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install MkDocs and dependencies
        run: |
          pip install -r requirements.txt

      - name: Build documentation
        run: |
          mkdocs build --strict

      - name: Deploy to GitHub Pages
        run: |
          mkdocs gh-deploy --force
