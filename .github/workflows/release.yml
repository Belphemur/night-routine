name: Release

on:
  push:
    branches: # Changed from tags to branches
      - main

# Permissions required for the workflow steps
permissions:
  contents: write # To create releases, upload artifacts, and allow semantic-release to push tags/commits
  packages: write # To push Docker images to GHCR
  id-token: write # For keyless signing with Cosign/Sigstore
  issues: write # For semantic-release to comment on issues
  pull-requests: write # For semantic-release to comment on PRs

# Ensure only one release job runs at a time
concurrency:
  group: release
  cancel-in-progress: false

jobs:
  release:
    name: Release
    runs-on: ubuntu-latest
    steps:
      # Calculate the Docker image name with proper format for GHCR
      - name: Set Docker image name
        id: image-name
        run: echo "value=ghcr.io/$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT

      # Check out the repository code with full history for semantic-release
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ssh-key: ${{ secrets.DEPLOY_SSH_KEY }} # Your private key

      # Set up Go environment (for GoReleaser)
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.24" # Keep aligned with go.mod
          cache: true

      # Install Cosign for signing artifacts (used by GoReleaser)
      - name: Install Cosign
        uses: sigstore/cosign-installer@v3.8.2

      # Install Syft for SBOM generation (if GoReleaser is configured to use it or for other steps)
      - name: Install Syft
        uses: anchore/sbom-action/download-syft@v0.20.0

      # Set up QEMU for multi-platform builds (used by GoReleaser's Docker buildx)
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      # Log in to GitHub Container Registry (GHCR) (for GoReleaser)
      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Install GoReleaser CLI (for semantic-release-goreleaser plugin)
      - name: Install GoReleaser CLI
        uses: goreleaser/goreleaser-action@v6
        with:
          version: latest
          install-only: true

      # Set up Node.js (for semantic-release)
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "lts/*" # Use a Long Term Support version
          cache: "npm" # Cache npm dependencies

      # Install semantic-release and plugins
      - name: Install semantic-release dependencies
        run: npm ci

      # Run semantic-release
      # This will analyze commits, determine version, generate notes,
      # trigger GoReleaser (via semantic-release-goreleaser plugin),
      # and publish the GitHub release.
      - name: Run semantic-release
        run: npx semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          COSIGN_EXPERIMENTAL: "1" # Required if .goreleaser.yml uses keyless signing

      - name: Export digest
        id: digests
        run: |
          DIGEST=$(docker buildx imagetools inspect ${{ steps.image-name.outputs.value }}:latest --format "{{json .Manifest.Digest}}" | xargs)
          echo "digest=$DIGEST" >> $GITHUB_OUTPUT
          echo "## Image Digest Information" >> $GITHUB_STEP_SUMMARY
          echo "- Image: \`${{ steps.image-name.outputs.value }}:latest\`" >> $GITHUB_STEP_SUMMARY
          echo "- Digest: \`$DIGEST\`" >> $GITHUB_STEP_SUMMARY

      # Generate SLSA provenance attestation for the Docker manifest list
      - name: Attest Build Provenance
        uses: actions/attest-build-provenance@v2
        with:
          subject-name: ${{ steps.image-name.outputs.value }}
          subject-digest: ${{ steps.digests.outputs.digest }}
          push-to-registry: true # Upload attestation to GHCR
