name: Release

on:
  push:
    tags:
      - "v*"

# Permissions required for the workflow steps
permissions:
  contents: write # To create releases and upload artifacts
  packages: write # To push Docker images to GHCR
  id-token: write # For keyless signing with Cosign/Sigstore
  attestations: write # To write SLSA attestations

jobs:
  release:
    name: Release
    runs-on: ubuntu-latest
    steps:
      # Calculate the Docker image name with proper format for GHCR
      - name: Set Docker image name
        id: image-name
        run: echo "value=ghcr.io/$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT

      # Check out the repository code
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch all history for tags and commit messages

      # Set up Go environment
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.24" # Keep aligned with go.mod
          cache: true

      # Install Cosign for signing artifacts
      - name: Install Cosign
        uses: sigstore/cosign-installer@v3.8.1 # Use a specific version

      # Install Syft for SBOM generation (though GoReleaser uses its own)
      # Kept as per plan, might be useful for verification/future steps
      - name: Install Syft
        uses: anchore/sbom-action/download-syft@v0.18.0

      # Set up QEMU for multi-platform builds (used by GoReleaser's Docker buildx)
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      # Log in to GitHub Container Registry (GHCR)
      # GoReleaser needs this to push Docker images and signatures
      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }} # More robust than github.actor
          password: ${{ secrets.GITHUB_TOKEN }}

      # Run GoReleaser
      # This handles building binaries, creating archives, SBOMs, Docker images,
      # pushing Docker images/manifests, signing checksums/images, and creating the GitHub release.
      - name: Run GoReleaser
        id: goreleaser # Add ID to reference outputs
        uses: goreleaser/goreleaser-action@v6
        with:
          version: latest
          args: release --clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # COSIGN_EXPERIMENTAL: "1" # Set for keyless signing (needed by GoReleaser's sign sections)
          # Note: If cosign v2+, COSIGN_EXPERIMENTAL might not be needed, but doesn't hurt.

      # --- Post-GoReleaser Steps for Attestation ---

      - name: Extract Manifest Digests
        id: digests
        run: |
          # Get version from metadata
          VERSION=$(jq -r '.version' dist/metadata.json)

          # Get manifest digests
          VERSION_MANIFEST_DIGEST=$(jq -r --arg version "ghcr.io/belphemur/night-routine:$VERSION" '.docker_manifests[] | select(.name == $version) | .digest' dist/artifacts.json)
          LATEST_MANIFEST_DIGEST=$(jq -r '.docker_manifests[] | select(.name == "ghcr.io/belphemur/night-routine:latest") | .digest' dist/artifacts.json)

          # Output to environment and summary
          echo "version_manifest_digest=$VERSION_MANIFEST_DIGEST" >> $GITHUB_OUTPUT
          echo "manifest_digest=$LATEST_MANIFEST_DIGEST" >> $GITHUB_OUTPUT

          # Add to step summary
          echo "## Docker Image Digests" >> $GITHUB_STEP_SUMMARY
          echo "- Version ($VERSION): \`$VERSION_MANIFEST_DIGEST\`" >> $GITHUB_STEP_SUMMARY
          echo "- Latest: \`$LATEST_MANIFEST_DIGEST\`" >> $GITHUB_STEP_SUMMARY

      # Generate SLSA provenance attestation for the Docker manifest list
      - name: Attest Build Provenance
        uses: actions/attest-build-provenance@v2
        with:
          subject-name: ${{ steps.image-name.outputs.value }}
          subject-digest: ${{ steps.digests.outputs.manifest_digest }}
          push-to-registry: true # Upload attestation to GHCR
